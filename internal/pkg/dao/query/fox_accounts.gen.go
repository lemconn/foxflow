// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lemconn/foxflow/internal/pkg/dao/model"
)

func newFoxAccount(db *gorm.DB, opts ...gen.DOOption) foxAccount {
	_foxAccount := foxAccount{}

	_foxAccount.foxAccountDo.UseDB(db, opts...)
	_foxAccount.foxAccountDo.UseModel(&model.FoxAccount{})

	tableName := _foxAccount.foxAccountDo.TableName()
	_foxAccount.ALL = field.NewAsterisk(tableName)
	_foxAccount.ID = field.NewInt64(tableName, "id")
	_foxAccount.Name = field.NewString(tableName, "name")
	_foxAccount.Exchange = field.NewString(tableName, "exchange")
	_foxAccount.AccessKey = field.NewString(tableName, "access_key")
	_foxAccount.SecretKey = field.NewString(tableName, "secret_key")
	_foxAccount.Passphrase = field.NewString(tableName, "passphrase")
	_foxAccount.IsActive = field.NewInt(tableName, "is_active")
	_foxAccount.TradeType = field.NewString(tableName, "trade_type")
	_foxAccount.CreatedAt = field.NewTime(tableName, "created_at")
	_foxAccount.UpdatedAt = field.NewTime(tableName, "updated_at")

	_foxAccount.fillFieldMap()

	return _foxAccount
}

// foxAccount account table
type foxAccount struct {
	foxAccountDo

	ALL        field.Asterisk
	ID         field.Int64  // account id
	Name       field.String // name
	Exchange   field.String // exchange
	AccessKey  field.String // access key
	SecretKey  field.String // secret key
	Passphrase field.String // passphrase
	IsActive   field.Int    // active status
	TradeType  field.String // account environment
	CreatedAt  field.Time   // create time
	UpdatedAt  field.Time   // update time

	fieldMap map[string]field.Expr
}

func (f foxAccount) Table(newTableName string) *foxAccount {
	f.foxAccountDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f foxAccount) As(alias string) *foxAccount {
	f.foxAccountDo.DO = *(f.foxAccountDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *foxAccount) updateTableName(table string) *foxAccount {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.Exchange = field.NewString(table, "exchange")
	f.AccessKey = field.NewString(table, "access_key")
	f.SecretKey = field.NewString(table, "secret_key")
	f.Passphrase = field.NewString(table, "passphrase")
	f.IsActive = field.NewInt(table, "is_active")
	f.TradeType = field.NewString(table, "trade_type")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *foxAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *foxAccount) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 10)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["exchange"] = f.Exchange
	f.fieldMap["access_key"] = f.AccessKey
	f.fieldMap["secret_key"] = f.SecretKey
	f.fieldMap["passphrase"] = f.Passphrase
	f.fieldMap["is_active"] = f.IsActive
	f.fieldMap["trade_type"] = f.TradeType
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f foxAccount) clone(db *gorm.DB) foxAccount {
	f.foxAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f foxAccount) replaceDB(db *gorm.DB) foxAccount {
	f.foxAccountDo.ReplaceDB(db)
	return f
}

type foxAccountDo struct{ gen.DO }

type IFoxAccountDo interface {
	gen.SubQuery
	Debug() IFoxAccountDo
	WithContext(ctx context.Context) IFoxAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFoxAccountDo
	WriteDB() IFoxAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFoxAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFoxAccountDo
	Not(conds ...gen.Condition) IFoxAccountDo
	Or(conds ...gen.Condition) IFoxAccountDo
	Select(conds ...field.Expr) IFoxAccountDo
	Where(conds ...gen.Condition) IFoxAccountDo
	Order(conds ...field.Expr) IFoxAccountDo
	Distinct(cols ...field.Expr) IFoxAccountDo
	Omit(cols ...field.Expr) IFoxAccountDo
	Join(table schema.Tabler, on ...field.Expr) IFoxAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFoxAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFoxAccountDo
	Group(cols ...field.Expr) IFoxAccountDo
	Having(conds ...gen.Condition) IFoxAccountDo
	Limit(limit int) IFoxAccountDo
	Offset(offset int) IFoxAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFoxAccountDo
	Unscoped() IFoxAccountDo
	Create(values ...*model.FoxAccount) error
	CreateInBatches(values []*model.FoxAccount, batchSize int) error
	Save(values ...*model.FoxAccount) error
	First() (*model.FoxAccount, error)
	Take() (*model.FoxAccount, error)
	Last() (*model.FoxAccount, error)
	Find() ([]*model.FoxAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FoxAccount, err error)
	FindInBatches(result *[]*model.FoxAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FoxAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFoxAccountDo
	Assign(attrs ...field.AssignExpr) IFoxAccountDo
	Joins(fields ...field.RelationField) IFoxAccountDo
	Preload(fields ...field.RelationField) IFoxAccountDo
	FirstOrInit() (*model.FoxAccount, error)
	FirstOrCreate() (*model.FoxAccount, error)
	FindByPage(offset int, limit int) (result []*model.FoxAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFoxAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f foxAccountDo) Debug() IFoxAccountDo {
	return f.withDO(f.DO.Debug())
}

func (f foxAccountDo) WithContext(ctx context.Context) IFoxAccountDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f foxAccountDo) ReadDB() IFoxAccountDo {
	return f.Clauses(dbresolver.Read)
}

func (f foxAccountDo) WriteDB() IFoxAccountDo {
	return f.Clauses(dbresolver.Write)
}

func (f foxAccountDo) Session(config *gorm.Session) IFoxAccountDo {
	return f.withDO(f.DO.Session(config))
}

func (f foxAccountDo) Clauses(conds ...clause.Expression) IFoxAccountDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f foxAccountDo) Returning(value interface{}, columns ...string) IFoxAccountDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f foxAccountDo) Not(conds ...gen.Condition) IFoxAccountDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f foxAccountDo) Or(conds ...gen.Condition) IFoxAccountDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f foxAccountDo) Select(conds ...field.Expr) IFoxAccountDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f foxAccountDo) Where(conds ...gen.Condition) IFoxAccountDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f foxAccountDo) Order(conds ...field.Expr) IFoxAccountDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f foxAccountDo) Distinct(cols ...field.Expr) IFoxAccountDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f foxAccountDo) Omit(cols ...field.Expr) IFoxAccountDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f foxAccountDo) Join(table schema.Tabler, on ...field.Expr) IFoxAccountDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f foxAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFoxAccountDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f foxAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IFoxAccountDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f foxAccountDo) Group(cols ...field.Expr) IFoxAccountDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f foxAccountDo) Having(conds ...gen.Condition) IFoxAccountDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f foxAccountDo) Limit(limit int) IFoxAccountDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f foxAccountDo) Offset(offset int) IFoxAccountDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f foxAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFoxAccountDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f foxAccountDo) Unscoped() IFoxAccountDo {
	return f.withDO(f.DO.Unscoped())
}

func (f foxAccountDo) Create(values ...*model.FoxAccount) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f foxAccountDo) CreateInBatches(values []*model.FoxAccount, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f foxAccountDo) Save(values ...*model.FoxAccount) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f foxAccountDo) First() (*model.FoxAccount, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxAccount), nil
	}
}

func (f foxAccountDo) Take() (*model.FoxAccount, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxAccount), nil
	}
}

func (f foxAccountDo) Last() (*model.FoxAccount, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxAccount), nil
	}
}

func (f foxAccountDo) Find() ([]*model.FoxAccount, error) {
	result, err := f.DO.Find()
	return result.([]*model.FoxAccount), err
}

func (f foxAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FoxAccount, err error) {
	buf := make([]*model.FoxAccount, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f foxAccountDo) FindInBatches(result *[]*model.FoxAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f foxAccountDo) Attrs(attrs ...field.AssignExpr) IFoxAccountDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f foxAccountDo) Assign(attrs ...field.AssignExpr) IFoxAccountDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f foxAccountDo) Joins(fields ...field.RelationField) IFoxAccountDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f foxAccountDo) Preload(fields ...field.RelationField) IFoxAccountDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f foxAccountDo) FirstOrInit() (*model.FoxAccount, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxAccount), nil
	}
}

func (f foxAccountDo) FirstOrCreate() (*model.FoxAccount, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxAccount), nil
	}
}

func (f foxAccountDo) FindByPage(offset int, limit int) (result []*model.FoxAccount, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f foxAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f foxAccountDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f foxAccountDo) Delete(models ...*model.FoxAccount) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *foxAccountDo) withDO(do gen.Dao) *foxAccountDo {
	f.DO = *do.(*gen.DO)
	return f
}
