// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lemconn/foxflow/internal/pkg/dao/model"
)

func newFoxExchange(db *gorm.DB, opts ...gen.DOOption) foxExchange {
	_foxExchange := foxExchange{}

	_foxExchange.foxExchangeDo.UseDB(db, opts...)
	_foxExchange.foxExchangeDo.UseModel(&model.FoxExchange{})

	tableName := _foxExchange.foxExchangeDo.TableName()
	_foxExchange.ALL = field.NewAsterisk(tableName)
	_foxExchange.ID = field.NewInt64(tableName, "id")
	_foxExchange.Name = field.NewString(tableName, "name")
	_foxExchange.APIURL = field.NewString(tableName, "api_url")
	_foxExchange.ProxyURL = field.NewString(tableName, "proxy_url")
	_foxExchange.IsActive = field.NewInt(tableName, "is_active")
	_foxExchange.CreatedAt = field.NewTime(tableName, "created_at")
	_foxExchange.UpdatedAt = field.NewTime(tableName, "updated_at")

	_foxExchange.fillFieldMap()

	return _foxExchange
}

// foxExchange exchange table
type foxExchange struct {
	foxExchangeDo

	ALL       field.Asterisk
	ID        field.Int64  // exchange id
	Name      field.String // name
	APIURL    field.String // api url
	ProxyURL  field.String // proxy url
	IsActive  field.Int    // active status
	CreatedAt field.Time   // create time
	UpdatedAt field.Time   // update time

	fieldMap map[string]field.Expr
}

func (f foxExchange) Table(newTableName string) *foxExchange {
	f.foxExchangeDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f foxExchange) As(alias string) *foxExchange {
	f.foxExchangeDo.DO = *(f.foxExchangeDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *foxExchange) updateTableName(table string) *foxExchange {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.APIURL = field.NewString(table, "api_url")
	f.ProxyURL = field.NewString(table, "proxy_url")
	f.IsActive = field.NewInt(table, "is_active")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *foxExchange) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *foxExchange) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["api_url"] = f.APIURL
	f.fieldMap["proxy_url"] = f.ProxyURL
	f.fieldMap["is_active"] = f.IsActive
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f foxExchange) clone(db *gorm.DB) foxExchange {
	f.foxExchangeDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f foxExchange) replaceDB(db *gorm.DB) foxExchange {
	f.foxExchangeDo.ReplaceDB(db)
	return f
}

type foxExchangeDo struct{ gen.DO }

type IFoxExchangeDo interface {
	gen.SubQuery
	Debug() IFoxExchangeDo
	WithContext(ctx context.Context) IFoxExchangeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFoxExchangeDo
	WriteDB() IFoxExchangeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFoxExchangeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFoxExchangeDo
	Not(conds ...gen.Condition) IFoxExchangeDo
	Or(conds ...gen.Condition) IFoxExchangeDo
	Select(conds ...field.Expr) IFoxExchangeDo
	Where(conds ...gen.Condition) IFoxExchangeDo
	Order(conds ...field.Expr) IFoxExchangeDo
	Distinct(cols ...field.Expr) IFoxExchangeDo
	Omit(cols ...field.Expr) IFoxExchangeDo
	Join(table schema.Tabler, on ...field.Expr) IFoxExchangeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFoxExchangeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFoxExchangeDo
	Group(cols ...field.Expr) IFoxExchangeDo
	Having(conds ...gen.Condition) IFoxExchangeDo
	Limit(limit int) IFoxExchangeDo
	Offset(offset int) IFoxExchangeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFoxExchangeDo
	Unscoped() IFoxExchangeDo
	Create(values ...*model.FoxExchange) error
	CreateInBatches(values []*model.FoxExchange, batchSize int) error
	Save(values ...*model.FoxExchange) error
	First() (*model.FoxExchange, error)
	Take() (*model.FoxExchange, error)
	Last() (*model.FoxExchange, error)
	Find() ([]*model.FoxExchange, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FoxExchange, err error)
	FindInBatches(result *[]*model.FoxExchange, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FoxExchange) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFoxExchangeDo
	Assign(attrs ...field.AssignExpr) IFoxExchangeDo
	Joins(fields ...field.RelationField) IFoxExchangeDo
	Preload(fields ...field.RelationField) IFoxExchangeDo
	FirstOrInit() (*model.FoxExchange, error)
	FirstOrCreate() (*model.FoxExchange, error)
	FindByPage(offset int, limit int) (result []*model.FoxExchange, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFoxExchangeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f foxExchangeDo) Debug() IFoxExchangeDo {
	return f.withDO(f.DO.Debug())
}

func (f foxExchangeDo) WithContext(ctx context.Context) IFoxExchangeDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f foxExchangeDo) ReadDB() IFoxExchangeDo {
	return f.Clauses(dbresolver.Read)
}

func (f foxExchangeDo) WriteDB() IFoxExchangeDo {
	return f.Clauses(dbresolver.Write)
}

func (f foxExchangeDo) Session(config *gorm.Session) IFoxExchangeDo {
	return f.withDO(f.DO.Session(config))
}

func (f foxExchangeDo) Clauses(conds ...clause.Expression) IFoxExchangeDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f foxExchangeDo) Returning(value interface{}, columns ...string) IFoxExchangeDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f foxExchangeDo) Not(conds ...gen.Condition) IFoxExchangeDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f foxExchangeDo) Or(conds ...gen.Condition) IFoxExchangeDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f foxExchangeDo) Select(conds ...field.Expr) IFoxExchangeDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f foxExchangeDo) Where(conds ...gen.Condition) IFoxExchangeDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f foxExchangeDo) Order(conds ...field.Expr) IFoxExchangeDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f foxExchangeDo) Distinct(cols ...field.Expr) IFoxExchangeDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f foxExchangeDo) Omit(cols ...field.Expr) IFoxExchangeDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f foxExchangeDo) Join(table schema.Tabler, on ...field.Expr) IFoxExchangeDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f foxExchangeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFoxExchangeDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f foxExchangeDo) RightJoin(table schema.Tabler, on ...field.Expr) IFoxExchangeDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f foxExchangeDo) Group(cols ...field.Expr) IFoxExchangeDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f foxExchangeDo) Having(conds ...gen.Condition) IFoxExchangeDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f foxExchangeDo) Limit(limit int) IFoxExchangeDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f foxExchangeDo) Offset(offset int) IFoxExchangeDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f foxExchangeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFoxExchangeDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f foxExchangeDo) Unscoped() IFoxExchangeDo {
	return f.withDO(f.DO.Unscoped())
}

func (f foxExchangeDo) Create(values ...*model.FoxExchange) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f foxExchangeDo) CreateInBatches(values []*model.FoxExchange, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f foxExchangeDo) Save(values ...*model.FoxExchange) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f foxExchangeDo) First() (*model.FoxExchange, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxExchange), nil
	}
}

func (f foxExchangeDo) Take() (*model.FoxExchange, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxExchange), nil
	}
}

func (f foxExchangeDo) Last() (*model.FoxExchange, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxExchange), nil
	}
}

func (f foxExchangeDo) Find() ([]*model.FoxExchange, error) {
	result, err := f.DO.Find()
	return result.([]*model.FoxExchange), err
}

func (f foxExchangeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FoxExchange, err error) {
	buf := make([]*model.FoxExchange, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f foxExchangeDo) FindInBatches(result *[]*model.FoxExchange, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f foxExchangeDo) Attrs(attrs ...field.AssignExpr) IFoxExchangeDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f foxExchangeDo) Assign(attrs ...field.AssignExpr) IFoxExchangeDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f foxExchangeDo) Joins(fields ...field.RelationField) IFoxExchangeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f foxExchangeDo) Preload(fields ...field.RelationField) IFoxExchangeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f foxExchangeDo) FirstOrInit() (*model.FoxExchange, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxExchange), nil
	}
}

func (f foxExchangeDo) FirstOrCreate() (*model.FoxExchange, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxExchange), nil
	}
}

func (f foxExchangeDo) FindByPage(offset int, limit int) (result []*model.FoxExchange, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f foxExchangeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f foxExchangeDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f foxExchangeDo) Delete(models ...*model.FoxExchange) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *foxExchangeDo) withDO(do gen.Dao) *foxExchangeDo {
	f.DO = *do.(*gen.DO)
	return f
}
