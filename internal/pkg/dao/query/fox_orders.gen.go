// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lemconn/foxflow/internal/pkg/dao/model"
)

func newFoxOrder(db *gorm.DB, opts ...gen.DOOption) foxOrder {
	_foxOrder := foxOrder{}

	_foxOrder.foxOrderDo.UseDB(db, opts...)
	_foxOrder.foxOrderDo.UseModel(&model.FoxOrder{})

	tableName := _foxOrder.foxOrderDo.TableName()
	_foxOrder.ALL = field.NewAsterisk(tableName)
	_foxOrder.ID = field.NewInt64(tableName, "id")
	_foxOrder.Exchange = field.NewString(tableName, "exchange")
	_foxOrder.AccountID = field.NewInt64(tableName, "account_id")
	_foxOrder.Symbol = field.NewString(tableName, "symbol")
	_foxOrder.Side = field.NewString(tableName, "side")
	_foxOrder.PosSide = field.NewString(tableName, "pos_side")
	_foxOrder.MarginType = field.NewString(tableName, "margin_type")
	_foxOrder.Price = field.NewFloat64(tableName, "price")
	_foxOrder.Size = field.NewFloat64(tableName, "size")
	_foxOrder.SizeType = field.NewString(tableName, "size_type")
	_foxOrder.OrderType = field.NewString(tableName, "order_type")
	_foxOrder.Strategy = field.NewString(tableName, "strategy")
	_foxOrder.OrderID = field.NewString(tableName, "order_id")
	_foxOrder.Type = field.NewString(tableName, "type")
	_foxOrder.Status = field.NewString(tableName, "status")
	_foxOrder.Msg = field.NewString(tableName, "msg")
	_foxOrder.CreatedAt = field.NewTime(tableName, "created_at")
	_foxOrder.UpdatedAt = field.NewTime(tableName, "updated_at")
	_foxOrder.Account = foxOrderBelongsToAccount{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Account", "model.FoxAccount"),
	}

	_foxOrder.fillFieldMap()

	return _foxOrder
}

// foxOrder order table
type foxOrder struct {
	foxOrderDo

	ALL        field.Asterisk
	ID         field.Int64   // order id
	Exchange   field.String  // exchange
	AccountID  field.Int64   // account id
	Symbol     field.String  // symbol name
	Side       field.String  // side
	PosSide    field.String  // position side
	MarginType field.String  // margin type
	Price      field.Float64 // limit price
	Size       field.Float64 // amount size
	SizeType   field.String  // amount unit
	OrderType  field.String  // order type
	Strategy   field.String  // strategy
	OrderID    field.String  // order id
	Type       field.String  // type
	Status     field.String  // status
	Msg        field.String
	CreatedAt  field.Time // create time
	UpdatedAt  field.Time // update time
	Account    foxOrderBelongsToAccount

	fieldMap map[string]field.Expr
}

func (f foxOrder) Table(newTableName string) *foxOrder {
	f.foxOrderDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f foxOrder) As(alias string) *foxOrder {
	f.foxOrderDo.DO = *(f.foxOrderDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *foxOrder) updateTableName(table string) *foxOrder {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Exchange = field.NewString(table, "exchange")
	f.AccountID = field.NewInt64(table, "account_id")
	f.Symbol = field.NewString(table, "symbol")
	f.Side = field.NewString(table, "side")
	f.PosSide = field.NewString(table, "pos_side")
	f.MarginType = field.NewString(table, "margin_type")
	f.Price = field.NewFloat64(table, "price")
	f.Size = field.NewFloat64(table, "size")
	f.SizeType = field.NewString(table, "size_type")
	f.OrderType = field.NewString(table, "order_type")
	f.Strategy = field.NewString(table, "strategy")
	f.OrderID = field.NewString(table, "order_id")
	f.Type = field.NewString(table, "type")
	f.Status = field.NewString(table, "status")
	f.Msg = field.NewString(table, "msg")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *foxOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *foxOrder) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 19)
	f.fieldMap["id"] = f.ID
	f.fieldMap["exchange"] = f.Exchange
	f.fieldMap["account_id"] = f.AccountID
	f.fieldMap["symbol"] = f.Symbol
	f.fieldMap["side"] = f.Side
	f.fieldMap["pos_side"] = f.PosSide
	f.fieldMap["margin_type"] = f.MarginType
	f.fieldMap["price"] = f.Price
	f.fieldMap["size"] = f.Size
	f.fieldMap["size_type"] = f.SizeType
	f.fieldMap["order_type"] = f.OrderType
	f.fieldMap["strategy"] = f.Strategy
	f.fieldMap["order_id"] = f.OrderID
	f.fieldMap["type"] = f.Type
	f.fieldMap["status"] = f.Status
	f.fieldMap["msg"] = f.Msg
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt

}

func (f foxOrder) clone(db *gorm.DB) foxOrder {
	f.foxOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	f.Account.db = db.Session(&gorm.Session{Initialized: true})
	f.Account.db.Statement.ConnPool = db.Statement.ConnPool
	return f
}

func (f foxOrder) replaceDB(db *gorm.DB) foxOrder {
	f.foxOrderDo.ReplaceDB(db)
	f.Account.db = db.Session(&gorm.Session{})
	return f
}

type foxOrderBelongsToAccount struct {
	db *gorm.DB

	field.RelationField
}

func (a foxOrderBelongsToAccount) Where(conds ...field.Expr) *foxOrderBelongsToAccount {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a foxOrderBelongsToAccount) WithContext(ctx context.Context) *foxOrderBelongsToAccount {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a foxOrderBelongsToAccount) Session(session *gorm.Session) *foxOrderBelongsToAccount {
	a.db = a.db.Session(session)
	return &a
}

func (a foxOrderBelongsToAccount) Model(m *model.FoxOrder) *foxOrderBelongsToAccountTx {
	return &foxOrderBelongsToAccountTx{a.db.Model(m).Association(a.Name())}
}

func (a foxOrderBelongsToAccount) Unscoped() *foxOrderBelongsToAccount {
	a.db = a.db.Unscoped()
	return &a
}

type foxOrderBelongsToAccountTx struct{ tx *gorm.Association }

func (a foxOrderBelongsToAccountTx) Find() (result *model.FoxAccount, err error) {
	return result, a.tx.Find(&result)
}

func (a foxOrderBelongsToAccountTx) Append(values ...*model.FoxAccount) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a foxOrderBelongsToAccountTx) Replace(values ...*model.FoxAccount) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a foxOrderBelongsToAccountTx) Delete(values ...*model.FoxAccount) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a foxOrderBelongsToAccountTx) Clear() error {
	return a.tx.Clear()
}

func (a foxOrderBelongsToAccountTx) Count() int64 {
	return a.tx.Count()
}

func (a foxOrderBelongsToAccountTx) Unscoped() *foxOrderBelongsToAccountTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type foxOrderDo struct{ gen.DO }

type IFoxOrderDo interface {
	gen.SubQuery
	Debug() IFoxOrderDo
	WithContext(ctx context.Context) IFoxOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFoxOrderDo
	WriteDB() IFoxOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFoxOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFoxOrderDo
	Not(conds ...gen.Condition) IFoxOrderDo
	Or(conds ...gen.Condition) IFoxOrderDo
	Select(conds ...field.Expr) IFoxOrderDo
	Where(conds ...gen.Condition) IFoxOrderDo
	Order(conds ...field.Expr) IFoxOrderDo
	Distinct(cols ...field.Expr) IFoxOrderDo
	Omit(cols ...field.Expr) IFoxOrderDo
	Join(table schema.Tabler, on ...field.Expr) IFoxOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFoxOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFoxOrderDo
	Group(cols ...field.Expr) IFoxOrderDo
	Having(conds ...gen.Condition) IFoxOrderDo
	Limit(limit int) IFoxOrderDo
	Offset(offset int) IFoxOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFoxOrderDo
	Unscoped() IFoxOrderDo
	Create(values ...*model.FoxOrder) error
	CreateInBatches(values []*model.FoxOrder, batchSize int) error
	Save(values ...*model.FoxOrder) error
	First() (*model.FoxOrder, error)
	Take() (*model.FoxOrder, error)
	Last() (*model.FoxOrder, error)
	Find() ([]*model.FoxOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FoxOrder, err error)
	FindInBatches(result *[]*model.FoxOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FoxOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFoxOrderDo
	Assign(attrs ...field.AssignExpr) IFoxOrderDo
	Joins(fields ...field.RelationField) IFoxOrderDo
	Preload(fields ...field.RelationField) IFoxOrderDo
	FirstOrInit() (*model.FoxOrder, error)
	FirstOrCreate() (*model.FoxOrder, error)
	FindByPage(offset int, limit int) (result []*model.FoxOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFoxOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f foxOrderDo) Debug() IFoxOrderDo {
	return f.withDO(f.DO.Debug())
}

func (f foxOrderDo) WithContext(ctx context.Context) IFoxOrderDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f foxOrderDo) ReadDB() IFoxOrderDo {
	return f.Clauses(dbresolver.Read)
}

func (f foxOrderDo) WriteDB() IFoxOrderDo {
	return f.Clauses(dbresolver.Write)
}

func (f foxOrderDo) Session(config *gorm.Session) IFoxOrderDo {
	return f.withDO(f.DO.Session(config))
}

func (f foxOrderDo) Clauses(conds ...clause.Expression) IFoxOrderDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f foxOrderDo) Returning(value interface{}, columns ...string) IFoxOrderDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f foxOrderDo) Not(conds ...gen.Condition) IFoxOrderDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f foxOrderDo) Or(conds ...gen.Condition) IFoxOrderDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f foxOrderDo) Select(conds ...field.Expr) IFoxOrderDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f foxOrderDo) Where(conds ...gen.Condition) IFoxOrderDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f foxOrderDo) Order(conds ...field.Expr) IFoxOrderDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f foxOrderDo) Distinct(cols ...field.Expr) IFoxOrderDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f foxOrderDo) Omit(cols ...field.Expr) IFoxOrderDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f foxOrderDo) Join(table schema.Tabler, on ...field.Expr) IFoxOrderDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f foxOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFoxOrderDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f foxOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IFoxOrderDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f foxOrderDo) Group(cols ...field.Expr) IFoxOrderDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f foxOrderDo) Having(conds ...gen.Condition) IFoxOrderDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f foxOrderDo) Limit(limit int) IFoxOrderDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f foxOrderDo) Offset(offset int) IFoxOrderDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f foxOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFoxOrderDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f foxOrderDo) Unscoped() IFoxOrderDo {
	return f.withDO(f.DO.Unscoped())
}

func (f foxOrderDo) Create(values ...*model.FoxOrder) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f foxOrderDo) CreateInBatches(values []*model.FoxOrder, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f foxOrderDo) Save(values ...*model.FoxOrder) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f foxOrderDo) First() (*model.FoxOrder, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxOrder), nil
	}
}

func (f foxOrderDo) Take() (*model.FoxOrder, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxOrder), nil
	}
}

func (f foxOrderDo) Last() (*model.FoxOrder, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxOrder), nil
	}
}

func (f foxOrderDo) Find() ([]*model.FoxOrder, error) {
	result, err := f.DO.Find()
	return result.([]*model.FoxOrder), err
}

func (f foxOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FoxOrder, err error) {
	buf := make([]*model.FoxOrder, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f foxOrderDo) FindInBatches(result *[]*model.FoxOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f foxOrderDo) Attrs(attrs ...field.AssignExpr) IFoxOrderDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f foxOrderDo) Assign(attrs ...field.AssignExpr) IFoxOrderDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f foxOrderDo) Joins(fields ...field.RelationField) IFoxOrderDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f foxOrderDo) Preload(fields ...field.RelationField) IFoxOrderDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f foxOrderDo) FirstOrInit() (*model.FoxOrder, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxOrder), nil
	}
}

func (f foxOrderDo) FirstOrCreate() (*model.FoxOrder, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxOrder), nil
	}
}

func (f foxOrderDo) FindByPage(offset int, limit int) (result []*model.FoxOrder, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f foxOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f foxOrderDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f foxOrderDo) Delete(models ...*model.FoxOrder) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *foxOrderDo) withDO(do gen.Dao) *foxOrderDo {
	f.DO = *do.(*gen.DO)
	return f
}
