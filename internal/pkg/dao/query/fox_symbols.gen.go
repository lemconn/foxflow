// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lemconn/foxflow/internal/pkg/dao/model"
)

func newFoxSymbol(db *gorm.DB, opts ...gen.DOOption) foxSymbol {
	_foxSymbol := foxSymbol{}

	_foxSymbol.foxSymbolDo.UseDB(db, opts...)
	_foxSymbol.foxSymbolDo.UseModel(&model.FoxSymbol{})

	tableName := _foxSymbol.foxSymbolDo.TableName()
	_foxSymbol.ALL = field.NewAsterisk(tableName)
	_foxSymbol.ID = field.NewInt64(tableName, "id")
	_foxSymbol.Name = field.NewString(tableName, "name")
	_foxSymbol.AccountID = field.NewInt64(tableName, "account_id")
	_foxSymbol.Exchange = field.NewString(tableName, "exchange")
	_foxSymbol.Leverage = field.NewInt64(tableName, "leverage")
	_foxSymbol.MarginType = field.NewString(tableName, "margin_type")
	_foxSymbol.CreatedAt = field.NewTime(tableName, "created_at")
	_foxSymbol.UpdatedAt = field.NewTime(tableName, "updated_at")
	_foxSymbol.Account = foxSymbolBelongsToAccount{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Account", "model.FoxAccount"),
	}

	_foxSymbol.fillFieldMap()

	return _foxSymbol
}

// foxSymbol symbol table
type foxSymbol struct {
	foxSymbolDo

	ALL        field.Asterisk
	ID         field.Int64  // symbol id
	Name       field.String // name
	AccountID  field.Int64  // user id
	Exchange   field.String // exchange
	Leverage   field.Int64  // leverage
	MarginType field.String // margin type
	CreatedAt  field.Time   // create time
	UpdatedAt  field.Time   // update time
	Account    foxSymbolBelongsToAccount

	fieldMap map[string]field.Expr
}

func (f foxSymbol) Table(newTableName string) *foxSymbol {
	f.foxSymbolDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f foxSymbol) As(alias string) *foxSymbol {
	f.foxSymbolDo.DO = *(f.foxSymbolDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *foxSymbol) updateTableName(table string) *foxSymbol {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.Name = field.NewString(table, "name")
	f.AccountID = field.NewInt64(table, "account_id")
	f.Exchange = field.NewString(table, "exchange")
	f.Leverage = field.NewInt64(table, "leverage")
	f.MarginType = field.NewString(table, "margin_type")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *foxSymbol) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *foxSymbol) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["account_id"] = f.AccountID
	f.fieldMap["exchange"] = f.Exchange
	f.fieldMap["leverage"] = f.Leverage
	f.fieldMap["margin_type"] = f.MarginType
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt

}

func (f foxSymbol) clone(db *gorm.DB) foxSymbol {
	f.foxSymbolDo.ReplaceConnPool(db.Statement.ConnPool)
	f.Account.db = db.Session(&gorm.Session{Initialized: true})
	f.Account.db.Statement.ConnPool = db.Statement.ConnPool
	return f
}

func (f foxSymbol) replaceDB(db *gorm.DB) foxSymbol {
	f.foxSymbolDo.ReplaceDB(db)
	f.Account.db = db.Session(&gorm.Session{})
	return f
}

type foxSymbolBelongsToAccount struct {
	db *gorm.DB

	field.RelationField
}

func (a foxSymbolBelongsToAccount) Where(conds ...field.Expr) *foxSymbolBelongsToAccount {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a foxSymbolBelongsToAccount) WithContext(ctx context.Context) *foxSymbolBelongsToAccount {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a foxSymbolBelongsToAccount) Session(session *gorm.Session) *foxSymbolBelongsToAccount {
	a.db = a.db.Session(session)
	return &a
}

func (a foxSymbolBelongsToAccount) Model(m *model.FoxSymbol) *foxSymbolBelongsToAccountTx {
	return &foxSymbolBelongsToAccountTx{a.db.Model(m).Association(a.Name())}
}

func (a foxSymbolBelongsToAccount) Unscoped() *foxSymbolBelongsToAccount {
	a.db = a.db.Unscoped()
	return &a
}

type foxSymbolBelongsToAccountTx struct{ tx *gorm.Association }

func (a foxSymbolBelongsToAccountTx) Find() (result *model.FoxAccount, err error) {
	return result, a.tx.Find(&result)
}

func (a foxSymbolBelongsToAccountTx) Append(values ...*model.FoxAccount) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a foxSymbolBelongsToAccountTx) Replace(values ...*model.FoxAccount) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a foxSymbolBelongsToAccountTx) Delete(values ...*model.FoxAccount) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a foxSymbolBelongsToAccountTx) Clear() error {
	return a.tx.Clear()
}

func (a foxSymbolBelongsToAccountTx) Count() int64 {
	return a.tx.Count()
}

func (a foxSymbolBelongsToAccountTx) Unscoped() *foxSymbolBelongsToAccountTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type foxSymbolDo struct{ gen.DO }

type IFoxSymbolDo interface {
	gen.SubQuery
	Debug() IFoxSymbolDo
	WithContext(ctx context.Context) IFoxSymbolDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFoxSymbolDo
	WriteDB() IFoxSymbolDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFoxSymbolDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFoxSymbolDo
	Not(conds ...gen.Condition) IFoxSymbolDo
	Or(conds ...gen.Condition) IFoxSymbolDo
	Select(conds ...field.Expr) IFoxSymbolDo
	Where(conds ...gen.Condition) IFoxSymbolDo
	Order(conds ...field.Expr) IFoxSymbolDo
	Distinct(cols ...field.Expr) IFoxSymbolDo
	Omit(cols ...field.Expr) IFoxSymbolDo
	Join(table schema.Tabler, on ...field.Expr) IFoxSymbolDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFoxSymbolDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFoxSymbolDo
	Group(cols ...field.Expr) IFoxSymbolDo
	Having(conds ...gen.Condition) IFoxSymbolDo
	Limit(limit int) IFoxSymbolDo
	Offset(offset int) IFoxSymbolDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFoxSymbolDo
	Unscoped() IFoxSymbolDo
	Create(values ...*model.FoxSymbol) error
	CreateInBatches(values []*model.FoxSymbol, batchSize int) error
	Save(values ...*model.FoxSymbol) error
	First() (*model.FoxSymbol, error)
	Take() (*model.FoxSymbol, error)
	Last() (*model.FoxSymbol, error)
	Find() ([]*model.FoxSymbol, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FoxSymbol, err error)
	FindInBatches(result *[]*model.FoxSymbol, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FoxSymbol) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFoxSymbolDo
	Assign(attrs ...field.AssignExpr) IFoxSymbolDo
	Joins(fields ...field.RelationField) IFoxSymbolDo
	Preload(fields ...field.RelationField) IFoxSymbolDo
	FirstOrInit() (*model.FoxSymbol, error)
	FirstOrCreate() (*model.FoxSymbol, error)
	FindByPage(offset int, limit int) (result []*model.FoxSymbol, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFoxSymbolDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f foxSymbolDo) Debug() IFoxSymbolDo {
	return f.withDO(f.DO.Debug())
}

func (f foxSymbolDo) WithContext(ctx context.Context) IFoxSymbolDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f foxSymbolDo) ReadDB() IFoxSymbolDo {
	return f.Clauses(dbresolver.Read)
}

func (f foxSymbolDo) WriteDB() IFoxSymbolDo {
	return f.Clauses(dbresolver.Write)
}

func (f foxSymbolDo) Session(config *gorm.Session) IFoxSymbolDo {
	return f.withDO(f.DO.Session(config))
}

func (f foxSymbolDo) Clauses(conds ...clause.Expression) IFoxSymbolDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f foxSymbolDo) Returning(value interface{}, columns ...string) IFoxSymbolDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f foxSymbolDo) Not(conds ...gen.Condition) IFoxSymbolDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f foxSymbolDo) Or(conds ...gen.Condition) IFoxSymbolDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f foxSymbolDo) Select(conds ...field.Expr) IFoxSymbolDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f foxSymbolDo) Where(conds ...gen.Condition) IFoxSymbolDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f foxSymbolDo) Order(conds ...field.Expr) IFoxSymbolDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f foxSymbolDo) Distinct(cols ...field.Expr) IFoxSymbolDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f foxSymbolDo) Omit(cols ...field.Expr) IFoxSymbolDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f foxSymbolDo) Join(table schema.Tabler, on ...field.Expr) IFoxSymbolDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f foxSymbolDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFoxSymbolDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f foxSymbolDo) RightJoin(table schema.Tabler, on ...field.Expr) IFoxSymbolDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f foxSymbolDo) Group(cols ...field.Expr) IFoxSymbolDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f foxSymbolDo) Having(conds ...gen.Condition) IFoxSymbolDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f foxSymbolDo) Limit(limit int) IFoxSymbolDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f foxSymbolDo) Offset(offset int) IFoxSymbolDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f foxSymbolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFoxSymbolDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f foxSymbolDo) Unscoped() IFoxSymbolDo {
	return f.withDO(f.DO.Unscoped())
}

func (f foxSymbolDo) Create(values ...*model.FoxSymbol) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f foxSymbolDo) CreateInBatches(values []*model.FoxSymbol, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f foxSymbolDo) Save(values ...*model.FoxSymbol) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f foxSymbolDo) First() (*model.FoxSymbol, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxSymbol), nil
	}
}

func (f foxSymbolDo) Take() (*model.FoxSymbol, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxSymbol), nil
	}
}

func (f foxSymbolDo) Last() (*model.FoxSymbol, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxSymbol), nil
	}
}

func (f foxSymbolDo) Find() ([]*model.FoxSymbol, error) {
	result, err := f.DO.Find()
	return result.([]*model.FoxSymbol), err
}

func (f foxSymbolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FoxSymbol, err error) {
	buf := make([]*model.FoxSymbol, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f foxSymbolDo) FindInBatches(result *[]*model.FoxSymbol, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f foxSymbolDo) Attrs(attrs ...field.AssignExpr) IFoxSymbolDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f foxSymbolDo) Assign(attrs ...field.AssignExpr) IFoxSymbolDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f foxSymbolDo) Joins(fields ...field.RelationField) IFoxSymbolDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f foxSymbolDo) Preload(fields ...field.RelationField) IFoxSymbolDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f foxSymbolDo) FirstOrInit() (*model.FoxSymbol, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxSymbol), nil
	}
}

func (f foxSymbolDo) FirstOrCreate() (*model.FoxSymbol, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FoxSymbol), nil
	}
}

func (f foxSymbolDo) FindByPage(offset int, limit int) (result []*model.FoxSymbol, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f foxSymbolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f foxSymbolDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f foxSymbolDo) Delete(models ...*model.FoxSymbol) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *foxSymbolDo) withDO(do gen.Dao) *foxSymbolDo {
	f.DO = *do.(*gen.DO)
	return f
}
