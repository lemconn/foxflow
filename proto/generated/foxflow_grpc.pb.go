// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoxFlowServiceClient is the client API for FoxFlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoxFlowServiceClient interface {
	// 认证
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// 命令传递
	SendCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type foxFlowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoxFlowServiceClient(cc grpc.ClientConnInterface) FoxFlowServiceClient {
	return &foxFlowServiceClient{cc}
}

func (c *foxFlowServiceClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/generated.FoxFlowService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foxFlowServiceClient) SendCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/generated.FoxFlowService/SendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoxFlowServiceServer is the server API for FoxFlowService service.
// All implementations must embed UnimplementedFoxFlowServiceServer
// for forward compatibility
type FoxFlowServiceServer interface {
	// 认证
	Authenticate(context.Context, *AuthRequest) (*AuthResponse, error)
	// 命令传递
	SendCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	mustEmbedUnimplementedFoxFlowServiceServer()
}

// UnimplementedFoxFlowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFoxFlowServiceServer struct {
}

func (UnimplementedFoxFlowServiceServer) Authenticate(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedFoxFlowServiceServer) SendCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedFoxFlowServiceServer) mustEmbedUnimplementedFoxFlowServiceServer() {}

// UnsafeFoxFlowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoxFlowServiceServer will
// result in compilation errors.
type UnsafeFoxFlowServiceServer interface {
	mustEmbedUnimplementedFoxFlowServiceServer()
}

func RegisterFoxFlowServiceServer(s grpc.ServiceRegistrar, srv FoxFlowServiceServer) {
	s.RegisterService(&FoxFlowService_ServiceDesc, srv)
}

func _FoxFlowService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoxFlowServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.FoxFlowService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoxFlowServiceServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoxFlowService_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoxFlowServiceServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.FoxFlowService/SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoxFlowServiceServer).SendCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FoxFlowService_ServiceDesc is the grpc.ServiceDesc for FoxFlowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoxFlowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.FoxFlowService",
	HandlerType: (*FoxFlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _FoxFlowService_Authenticate_Handler,
		},
		{
			MethodName: "SendCommand",
			Handler:    _FoxFlowService_SendCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foxflow.proto",
}
